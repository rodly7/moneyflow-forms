
import { supabase } from '@/integrations/supabase/client';
import { SignUpMetadata } from '@/types/auth';

export const authService = {
  async signIn(phone: string, password: string) {
    console.log('üîê Tentative de connexion avec le num√©ro:', phone);
    
    // Normaliser le num√©ro de t√©l√©phone pour la connexion
    const normalizedPhone = phone.replace(/[^\d+]/g, '');
    const email = `${normalizedPhone}@sendflow.app`;
    console.log('üìß Email de connexion g√©n√©r√©:', email);
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email: email,
      password,
    });

    if (error) {
      console.error('‚ùå Erreur de connexion:', error);
      
      if (error.message.includes('Invalid login credentials')) {
        throw new Error('Num√©ro de t√©l√©phone ou mot de passe incorrect. V√©rifiez que vous utilisez le m√™me format qu\'√† l\'inscription.');
      }
      
      throw new Error('Num√©ro de t√©l√©phone ou mot de passe incorrect. V√©rifiez vos informations.');
    }
    
    console.log('‚úÖ Connexion r√©ussie pour:', data.user?.id);
  },

  async signUp(phone: string, password: string, metadata: SignUpMetadata) {
    console.log('üìù Tentative d\'inscription avec le num√©ro:', phone);
    console.log('üéØ R√¥le demand√©:', metadata.role);
    
    // Normaliser le num√©ro de t√©l√©phone pour l'inscription
    const normalizedPhone = phone.replace(/[^\d+]/g, '');
    const email = `${normalizedPhone}@sendflow.app`;
    console.log('üìß Email d\'inscription g√©n√©r√©:', email);
    
    const userRole = metadata.role === 'agent' ? 'agent' : 'user';
    console.log('üë• R√¥le final assign√©:', userRole);
    
    const { data, error } = await supabase.auth.signUp({
      email: email,
      password,
      options: {
        data: {
          ...metadata,
          phone: normalizedPhone,  // Utiliser le num√©ro normalis√©
          role: userRole,
        },
      },
    });

    if (error) {
      console.error('‚ùå Erreur d\'inscription:', error);
      if (error.message.includes('User already registered')) {
        throw new Error('Un compte existe d√©j√† avec ce num√©ro de t√©l√©phone. Essayez de vous connecter.');
      }
      throw error;
    }
    
    console.log('‚úÖ Inscription r√©ussie:', data.user?.id);
    console.log('üìã M√©tadonn√©es utilisateur:', data.user?.user_metadata);
  },

  async signOut() {
    const { error } = await supabase.auth.signOut();
    if (error) {
      throw error;
    }
  }
};
